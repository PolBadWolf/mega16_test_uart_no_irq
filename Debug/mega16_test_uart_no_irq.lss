
mega16_test_uart_no_irq.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000010e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000028  00800060  0000010e  00000182  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001aa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000915  00000000  00000000  000002a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000073e  00000000  00000000  00000bbd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000359  00000000  00000000  000012fb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c0  00000000  00000000  00001654  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000407  00000000  00000000  00001714  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000fb  00000000  00000000  00001b1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001c16  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee e0       	ldi	r30, 0x0E	; 14
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a8 38       	cpi	r26, 0x88	; 136
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 64 00 	call	0xc8	; 0xc8 <main>
  7a:	0c 94 85 00 	jmp	0x10a	; 0x10a <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <_Z17USARTTransmitCharc>:

//  Отправка байта
void USARTTransmitChar(const char c)
{
	//  Устанавливается, когда регистр свободен
	while(!( UCSRA & (1<<UDRE)));
  82:	5d 9b       	sbis	0x0b, 5	; 11
  84:	fe cf       	rjmp	.-4      	; 0x82 <_Z17USARTTransmitCharc>
	UDR = c;
  86:	8c b9       	out	0x0c, r24	; 12
  88:	08 95       	ret

0000008a <_Z16USARTReceiveCharv>:

//  Получение байта
char USARTReceiveChar(void)
{
	//  Устанавливается, когда регистр свободен
	while(!(UCSRA & (1<<RXC)));
  8a:	5f 9b       	sbis	0x0b, 7	; 11
  8c:	fe cf       	rjmp	.-4      	; 0x8a <_Z16USARTReceiveCharv>
	return UDR;
  8e:	8c b1       	in	r24, 0x0c	; 12
}
  90:	08 95       	ret

00000092 <_Z19USARTTransmitStringPKc>:
#include "IoByte.h"


//  Отправка строки
void USARTTransmitString(const char *str)
{
  92:	0f 93       	push	r16
  94:	1f 93       	push	r17
  96:	cf 93       	push	r28
  98:	8c 01       	movw	r16, r24
	register
	uint8_t i = 0;
  9a:	c0 e0       	ldi	r28, 0x00	; 0
	while(str[i])
  9c:	f8 01       	movw	r30, r16
  9e:	ec 0f       	add	r30, r28
  a0:	f1 1d       	adc	r31, r1
  a2:	80 81       	ld	r24, Z
  a4:	88 23       	and	r24, r24
  a6:	21 f0       	breq	.+8      	; 0xb0 <_Z19USARTTransmitStringPKc+0x1e>
	{
		USARTTransmitChar(str[i++]);
  a8:	cf 5f       	subi	r28, 0xFF	; 255
  aa:	0e 94 41 00 	call	0x82	; 0x82 <_Z17USARTTransmitCharc>
//  Отправка строки
void USARTTransmitString(const char *str)
{
	register
	uint8_t i = 0;
	while(str[i])
  ae:	f6 cf       	rjmp	.-20     	; 0x9c <_Z19USARTTransmitStringPKc+0xa>
	{
		USARTTransmitChar(str[i++]);
	}
}
  b0:	cf 91       	pop	r28
  b2:	1f 91       	pop	r17
  b4:	0f 91       	pop	r16
  b6:	08 95       	ret

000000b8 <_Z21USARTTransmitStringLnPKc>:


//  Отправка строки
void USARTTransmitStringLn(const char *str)
{
	USARTTransmitString(str);
  b8:	0e 94 49 00 	call	0x92	; 0x92 <_Z19USARTTransmitStringPKc>
	USARTTransmitChar((char)13);
  bc:	8d e0       	ldi	r24, 0x0D	; 13
  be:	0e 94 41 00 	call	0x82	; 0x82 <_Z17USARTTransmitCharc>
	USARTTransmitChar((char)10);
  c2:	8a e0       	ldi	r24, 0x0A	; 10
  c4:	0c 94 41 00 	jmp	0x82	; 0x82 <_Z17USARTTransmitCharc>

000000c8 <main>:


int main(void)
{
    /* Replace with your application code */
	USARTInit(MYUBRR);
  c8:	83 e3       	ldi	r24, 0x33	; 51
  ca:	90 e0       	ldi	r25, 0x00	; 0
  cc:	0e 94 7d 00 	call	0xfa	; 0xfa <_Z9USARTInitj>
	USARTTransmitStringLn("Привет");
  d0:	80 e6       	ldi	r24, 0x60	; 96
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 5c 00 	call	0xb8	; 0xb8 <_Z21USARTTransmitStringLnPKc>
	USARTTransmitStringLn("Сайт: micro-pi.ru");
  d8:	87 e6       	ldi	r24, 0x67	; 103
  da:	90 e0       	ldi	r25, 0x00	; 0
  dc:	0e 94 5c 00 	call	0xb8	; 0xb8 <_Z21USARTTransmitStringLnPKc>
	while (true)
	{
	  char c = USARTReceiveChar();
  e0:	0e 94 45 00 	call	0x8a	; 0x8a <_Z16USARTReceiveCharv>
  e4:	c8 2f       	mov	r28, r24
	  USARTTransmitString("Вы отправили: ");
  e6:	89 e7       	ldi	r24, 0x79	; 121
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	0e 94 49 00 	call	0x92	; 0x92 <_Z19USARTTransmitStringPKc>
	  USARTTransmitChar(c);
  ee:	8c 2f       	mov	r24, r28
  f0:	0e 94 41 00 	call	0x82	; 0x82 <_Z17USARTTransmitCharc>
	  USARTTransmitStringLn("");
  f4:	87 e8       	ldi	r24, 0x87	; 135
  f6:	90 e0       	ldi	r25, 0x00	; 0
  f8:	f1 cf       	rjmp	.-30     	; 0xdc <main+0x14>

000000fa <_Z9USARTInitj>:
void USARTInit(unsigned int ubrr)
{
	//  нормальный асинхронный двунаправленный режим работы
	//  UBRR = f / (16 * band)
	//  Установка скорости
	UBRRH = (unsigned char)(ubrr>>8);
  fa:	90 bd       	out	0x20, r25	; 32
	UBRRL = (unsigned char)(ubrr);
  fc:	89 b9       	out	0x09, r24	; 9
	//  |||||PE     - ошибка чётности
	//  ||||||U2X   - Двойная скорость
	//  |||||||MPCM - Многопроцессорный режим
	//  ||||||||
	//  76543210
	UCSRA = 0;
  fe:	1b b8       	out	0x0b, r1	; 11
	//  |||||||TXB8 - 9 бит переданных данных
	//  ||||||||
	//  76543210

	//  разрешен приём и передача данных по UART
	UCSRB = 1<<RXEN | 1<<TXEN;
 100:	88 e1       	ldi	r24, 0x18	; 24
 102:	8a b9       	out	0x0a, r24	; 10
	//  ||||||UCSZ0  - UCSZ0: 2 размер кадра данных
	//  |||||||UCPOL - в синхронном режиме - тактирование
	//  ||||||||
	//  76543210
	//  8-битовая посылка, 2 стоп бита
	UCSRC = 1<<URSEL | 1<<USBS | 1<<UCSZ0 | 1<<UCSZ1;
 104:	8e e8       	ldi	r24, 0x8E	; 142
 106:	80 bd       	out	0x20, r24	; 32
 108:	08 95       	ret

0000010a <_exit>:
 10a:	f8 94       	cli

0000010c <__stop_program>:
 10c:	ff cf       	rjmp	.-2      	; 0x10c <__stop_program>
